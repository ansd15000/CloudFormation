# make bastion host instance
AWSTemplateFormatVersion: 2010-09-09
Description: Make Bastion Instance
Parameters:
  VpcID:
    Type: AWS::EC2::VPC::Id # get vpc at already Created 
  Subnets:
    Type: AWS::EC2::Subnet::Id # you can multiple choice maybe using List<...>
  KeyName:
    Description : Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Can contain only ASCII charactor
    Default: '11' # custom point
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default : t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t3.micro
    ConstraintDescription: Must be a valid EC2 instance type
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instance
    # Type : String
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Mappings: # Conditional value when CloudFormation is being created
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t3.micro:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED

Resources: 
  InstanceSecurityGroup: # create SG
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref VpcID
      GroupName: Bastion-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: EC2 SG via CF
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces: # more details for Network
        - AssociatePublicIpAddress: True
          DeleteOnTermination: True
          DeviceIndex: 0
          SubnetId: !Ref Subnets
          GroupSet:
            - !Ref InstanceSecurityGroup

      # SubnetId: !Ref Subnets
      # SecurityGroupIds: # Type List. recommend using this than SecurityGroups
      #   - !Ref InstanceSecurityGroup
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref AWS::Region
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      Tags:
        - Key: Name
          Value: 'CF EC2'

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicDnsName
  # PublicIP:
  #   Description: Public IP address of the newly created EC2 instance
  #   Value: !GetAtt 
  #     - EC2Instance
  #     - PublicIp





