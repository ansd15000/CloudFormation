# make VPC, internetGW, public and private Subnet, EIP, nat GW, routetable
AWSTemplateFormatVersion: 2010-09-09
Description: Make VPC

# using my custom variable
Parameters:
  Ciders:
    Description: vpc_pub1_priv1_pub2_priv2
    Type: CommaDelimitedList
    Default: 10.0.1.0/24, 10.0.1.0/27, 10.0.1.128/27, 10.0.1.64/27, 10.0.1.192/27

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Select [0, !Ref Ciders]
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'CF_VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway

  MyPublic01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Select [1, !Ref Ciders]
      AvailabilityZone: !Select ['0', !GetAZs '']
      Tags:
        - Key: Name
          Value: 'CF Public01'

  MyPrivate01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Select [2, !Ref Ciders]
      Tags:
        - Key: Name
          Value: 'CF private01'

  MyPublic02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Select [3, !Ref Ciders]
      Tags:
        - Key: Name
          Value: 'CF Public02'

  MyPrivate02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Select [4, !Ref Ciders]
      Tags:
        - Key: Name
          Value: 'CF Private02'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: 'CF PublicRouteTable'

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: 'CF PrivateRouteTable'

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: 'CF EIP'

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt
        - EIP
        - AllocationId
      SubnetId: !Ref MyPublic01 # NAT via Public Subnet
      Tags:
        - Key: Name
          Value: 'CF_NAT GW'

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NATGateway

  # connection subnets at RouteTable
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublic01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublic02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivate01
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivate02
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VPC:
    Description: myVPC ID
    Value: !Ref myVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  
  AZ1:
    Description: AZ 1
    Value: !GetAtt
      - MyPublic01
      - AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZ1
  
  AZ2:
    Description: AZ 2
    Value: !GetAtt
      - MyPublic02
      - AvailabilityZone

  PublicSubnet01:
    Description: pub subnet01
    Value: !Ref MyPublic01
    Export:
      Name: !Sub ${AWS::StackName}-MyPublic01

  PublicSubnet02:
    Description: pub subnet02
    Value: !Ref MyPublic02

  PrivateSubnet01:
    Description: priv subnet01
    Value: !Ref MyPrivate01

  PrivateSubnet02:
    Description: priv subnet02
    Value: !Ref MyPrivate02